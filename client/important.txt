
$gray-300: #a3a3a3;
$gray-400: #858585;
$primary-400: #35596c;
$primary-500: #0f2936;
$primary-600: #091d2b;
$primary-700: #051926;
$primary-800: #060f14;
$secondary-300: #7ac5d7;
$secondary-500: #219ebc;
$secondary-800: #00b5e0;
$tertiary-50: #fff8e6;
$tertiary-100: #fff1cd;
$quaternary-500: #fb8500;

Dropzone -> component is likely from a library like react-dropzone. It provides an area where files can be dropped for uploading. It accepts several props to customize its behavior.
noClick={true}: Indicates that click events should be ignored on the dropzone. This means clicking on the dropzone itself won't trigger any action.




1. `setPreview(URL.createObjectURL(acceptedFiles[0]));`

   This line generates a URL representing the dropped file (in this case, `acceptedFiles[0]`) using the `URL.createObjectURL()` method. This method creates a DOMString containing a URL representing the object given in the parameter. This URL can then be used to refer to the file in the context of the current document. In other words, it creates a temporary URL that points directly to the file in memory.

   For example, if `acceptedFiles[0]` is an image file, this line generates a URL that can be used to display the image in an `<img>` tag or any other appropriate HTML element.

2. `onLoad={() => URL.revokeObjectURL(preview)}`

   This line specifies an `onLoad` event handler that gets triggered when the component or element using the `preview` URL has finished loading. When the preview is loaded, it invokes a function that revokes the URL generated by `URL.createObjectURL()`. 

   The `URL.revokeObjectURL()` method releases an existing object URL which was previously created by calling `URL.createObjectURL()`. This is important for memory management, as it frees up resources associated with the object URL. If you don't revoke the object URL after you're done using it, it can lead to memory leaks.

   By revoking the object URL after it has been used to display the preview, you ensure that memory is efficiently managed and that resources associated with the preview URL are released when they are no longer needed.

   So, in summary, these two lines work together to create a temporary URL for previewing the dropped file and then clean up that URL after the preview is loaded to prevent memory leaks.